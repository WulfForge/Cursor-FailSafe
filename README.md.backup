# FailSafe - AI Hallucination Detection & Prevention

> Create custom validation rules. Stop AI hallucinations. Build with confidence.

[![Version](https://img.shields.io/badge/version-2.5.0-blue.svg)](https://github.com/WulfForge/Cursor-FailSafe/releases)
[![License](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/WulfForge/Cursor-FailSafe/blob/main/LICENSE)

---

## 🎯 The Problem

AI development assistants often generate:
- **Hallucinations** - False claims and made-up information
- **Security issues** - Hardcoded credentials and vulnerabilities  
- **Quality problems** - Placeholder content and incomplete code
- **False claims** - Non-existent files and unexecuted commands

## 🛡️ The Solution

FailSafe provides a **comprehensive AI validation suite** with custom Cursor Rules, sprint management, and intelligent project analysis.

---

## ⚡ Get Started in 30 Seconds

1. **Install** the extension
2. **Open Dashboard** → Press `Ctrl+Shift+P` → Type "FailSafe: Show Dashboard"
3. **Create Sprint** → Use the dashboard to start managing your project
4. **Create Rules** → Custom validation for your needs
5. **Validate** → Check AI responses and code quality

That's it! Your AI safety system is now active.

**💡 Tip**: You can also access all FailSafe commands through the Command Palette (`Ctrl+Shift+P`) by typing "FailSafe".

---

## 🚀 New in 2.5.0 - Alpha Launch!

### 🎨 Modern Dashboard (Single Instance)
- **Single Dashboard Instance** - Only one dashboard webview open at a time
- **Webview-Contained Notifications** - All feedback stays within the dashboard
- **Clickable Logo** - Interactive MythologIQ branding with hover effects
- **Real-time Project Management** - Beautiful webview interface with live updates
- **Sprint Management** - Complete sprint lifecycle with templates and metrics
- **AI Integration** - OpenAI, Anthropic, and LocalAI for intelligent analysis
- **Project Health Monitoring** - Real-time metrics and health indicators

### 🔒 Enhanced Cursor Rules
- **Advanced Pattern Testing** - Regex, keyword, and semantic validation
- **Pattern Templates** - Pre-built rules for common scenarios
- **Real-time Validation** - Instant feedback on rule violations
- **Comprehensive Management** - Create, edit, and manage all your rules
- **Alerting Configuration** - Control when and how alerts are triggered

### 📊 Sprint Management
- **Sprint Templates** - Create reusable sprint structures
- **Export Functionality** - Export sprint data to JSON, CSV, and Markdown
- **Progress Tracking** - Real-time velocity and risk assessment
- **Task Management** - Add, complete, and track tasks

### 🤖 AI Response Validation
- **Passive Validation System** - Automatic validation without user intervention
- **Chat Response Interception** - Real-time validation of AI responses
- **Multiple AI Provider Support** - Works with VS Code Chat, GitHub Copilot, Cursor AI
- **Configurable Validation Rules** - Customize validation behavior
- **Error Handling** - Graceful failure handling with user notifications

---

## 🔒 Cursor Rules - Your Custom Validation Engine

Create rules that detect exactly what you care about:

### 🚨 Security Rules
```json
{
  "name": "Hardcoded Secrets",
  "pattern": "password\\s*=\\s*[\"'][^\"']+[\"']",
  "message": "Hardcoded password detected!",
  "response": "block"
}
```

### ✅ Quality Rules
```json
{
  "name": "Incomplete Code",
  "pattern": "TODO|FIXME|HACK",
  "message": "Incomplete implementation found",
  "response": "warn"
}
```

### 🎯 Pattern Types
- **Regex** - Precise pattern matching
- **Keywords** - Simple word detection  
- **Semantic** - Smart content analysis

### ⚙️ Response Actions
- **Block** - Stop and require override
- **Warn** - Show warning but continue
- **Log** - Record for tracking
- **Suggest** - Provide improvements

### 🔔 Alerting Configuration
- **When to Alert** - Immediate, delayed, batch, or manual
- **How to Alert** - Notifications, dashboard, or silent logging
- **Frequency Control** - Throttle alerts to prevent spam

---

## 🔍 What Gets Validated

| Type | What it Finds |
|------|---------------|
| **Code Blocks** | Syntax errors, security issues, placeholders |
| **File References** | Non-existent files mentioned in chat |
| **Command Claims** | Commands that don't exist or weren't run |
| **Implementation Claims** | False claims about code being implemented |
| **Hallucination Patterns** | Common AI hallucination language |
| **AI Responses** | Real-time validation of chat and code suggestions |

---

## 🎯 Perfect For

- **Vibe Coders** - Non-technical developers who need AI safety
- **Developers** - Validate AI-generated code with custom rules
- **Security Teams** - Catch hardcoded secrets and vulnerabilities
- **Code Reviewers** - Ensure AI responses are accurate and complete
- **Learners** - Understand AI hallucination patterns
- **Enterprises** - Enforce coding standards and compliance
- **Project Managers** - Track development progress and manage sprints

---

## ⚙️ Configuration

```json
{
  "failsafe.enabled": true,
  "failsafe.validation.strictMode": false,
  "failsafe.validation.focusAreas": ["security", "quality", "performance"],
  "failsafe.passiveValidation.enabled": true,
  "failsafe.passiveValidation.timeout": 3000,
  "failsafe.passiveValidation.mode": "full"
}
```

---

## 🎮 Commands

Access all commands through the Command Palette (`Ctrl+Shift+P`) by typing "FailSafe":

| Command | Action |
|---------|--------|
| `FailSafe: Show Dashboard` | 📊 Open modern project dashboard (single instance) |
| `FailSafe: Create Sprint` | 📅 Create new sprint with templates |
| `FailSafe: Create Cursorrule` | ✨ Create custom validation rules |
| `FailSafe: Manage Cursorrules` | 📋 View and manage your rules |
| `FailSafe: Validate with Cursorrules` | 🔍 Validate current file |
| `Validate Chat Content` | 🛡️ Check for hallucinations |
| `FailSafe: Import Project Plan` | 📋 Import plans from multiple sources |
| `FailSafe: Export Sprint Data` | 📤 Export sprint to JSON, CSV, or Markdown |

---

## 🧪 Testing & Development

Access testing tools through the dashboard:
- **Simulate FailSafe Event** - Test extension functionality
- **Show Action Log** - View detailed action history
- **View Session Log** - Access debugging information
- **Mark Task Complete** - Manual task management
- **Validate Plan with AI** - AI-powered plan validation
- **Test Passive Validation** - Test AI response validation system

---

## ⚠️ Important Notes

This extension validates existing chat content after AI responses are generated and provides passive validation for AI responses.

### ✅ What it CAN do:
- Create custom validation rules (Cursor Rules)
- Validate chat content for hallucinations
- Check file references exist
- Detect code quality issues
- Provide detailed reports
- Track development progress
- Manage sprints and project plans
- Export data to multiple formats
- Integrate with multiple AI providers
- Passive AI response validation
- Real-time chat response interception

### ❌ What it CANNOT do:
- Intercept AI requests in real-time (VS Code API limitation)
- Block AI responses automatically (requires user interaction)
- Monitor AI model outputs directly (provider-specific limitation)

---

## 🆘 Support

- **Issues**: [GitHub Issues](https://github.com/WulfForge/Cursor-FailSafe/issues)
- **Docs**: [Full Documentation](https://github.com/WulfForge/Cursor-FailSafe#readme)
- **Discussions**: [GitHub Discussions](https://github.com/WulfForge/Cursor-FailSafe/discussions)

---

## 📄 License

MIT License - see [LICENSE](LICENSE) file for details.

---

Made with ❤️ by [MythologIQ](https://www.MythologIQ.studio) for the Cursor community

**Version 2.5.0** - Alpha Launch! AI Hallucination Detection & Prevention with Sprint Management and Passive Validation. 